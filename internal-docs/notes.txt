CL-USER> (abcl-memory-compiler:compile-to-class
              "com.azf.gen.ABC"
                  "package com.azf.gen;
                   import org.armedbear.lisp.Primitive;
                   import org.armedbear.lisp.LispObject;
                   import org.armedbear.lisp.Lisp;
                   public class ABC {
                   public static final Primitive REMEMBER =
                          new Primitive(\"remember1\", Lisp.PACKAGE_SYS, true)
                      {
                       @Override
                       public LispObject execute(LispObject key, LispObject value)

                       {
                       return Lisp.NIL;
                       }
                      };
                   public ABC() {
                       System.out.println(\"inside constructor\");
                   }}")
#<java class com.azf.gen.ABC>
CL-USER> (jnew *)
#<com.azf.gen.ABC com.azf.gen.ABC@3a5ea94d {2CB56405}>
CL-USER> (sys::remember1 "asd" 4)
NIL
CL-USER>;; make sure you have the project :abcl-java-websocket (https://gitlab.com/cl-projects/abcl-java-websocket) in your ASDF discoverable folder and loaded previous to these following instructions
CL-USER> (ql:quickload :alexandria)
To load "alexandria":
  Load 1 ASDF system:
    alexandria
; Loading "alexandria"

(:ALEXANDRIA)
CL-USER> (setf *code* (alexandria:read-file-into-string "~/projects/abcl-memory-compiler/internal-docs/ext.java"))
"package org.azf;

import java.net.InetSocketAddress;
import java.nio.ByteBuffer;

import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

import org.armedbear.lisp.LispObject;

public class SimpleServer extends WebSocketServer {

	public SimpleServer(InetSocketAddress address) {
		super(address);
	}

        public LispObject funcall(LispObject obj) {return obj.execute();}

	@Override
	public void onOpen(WebSocket conn, ClientHandshake handshake) {
		conn.send(\"Welcome to the server!\"); //This method sends a message to the new client
		broadcast( \"new connection: \" + handshake.getResourceDescriptor() ); //This method sends a message to all clients connected
		System.out.println(\"new connection to \" + conn.getRemoteSocketAddress());
	}

	@Override
	public void onClose(WebSocket conn, int code, String reason, boolean remote) {
		System.out.println(\"closed \" + conn.getRemoteSocketAddress() + \" with exit code \" + code + \" additional info: \" + reason);
	}

	@Override
	public void onMessage(WebSocket conn, String message) {
		System.out.println(\"received message from \"	+ conn.getRemoteSocketAddress() + \": \" + message);
	}

	@Override
	public void onMessage( WebSocket conn, ByteBuffer message ) {
		System.out.println(\"received ByteBuffer from \"	+ conn.getRemoteSocketAddress());
	}

	@Override
	public void onError(WebSocket conn, Exception ex) {
		System.err.println(\"an error occurred on connection \" + conn.getRemoteSocketAddress()  + \":\" + ex);
	}

	@Override
	public void onStart() {
		System.out.println(\"server started successfully\");
	}


	// public static void main(String[] args) {
	// 	String host = \"localhost\";
	// 	int port = 8887;

	// 	WebSocketServer server = new SimpleServer(new InetSocketAddress(host, port));
	// 	server.run();
	// }
}
"
CL-USER> (abcl-memory-compiler:compile-to-class
              "org.azf.SimpleServer"
              *code*)

#<java class org.azf.SimpleServer>
CL-USER> (jnew * (jnew "java.net.InetSocketAddress" "localhost" 5060))
#<org.azf.SimpleServer org.azf.SimpleServer@3c25aca3 {E33D5B6}>
CL-USER>

;; GD!!!
